version: '3'
services:
  mongodb:
    image: mongo:latest
    container_name: mongo-container
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: products
      MONGO_INITDB_ROOT_USERNAME: frogadmin
      MONGO_INITDB_ROOT_PASSWORD: Froggy419
    volumes:
      - mongodb-data:/data/db
#authentication is done against admin database

  mysql:
    image: mysql:latest
    container_name: mysql-container
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: order-service
      MYSQL_ROOT_PASSWORD: rootPSWD419
      MYSQL_USER: myUser
      MYSQL_PASSWORD: myUserPSWD419
    volumes:
      - mysql-data:/var/lib/mysql

  mysql-second:
    image: mysql:latest
    container_name: mysql-second-container
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: inventory-service
      MYSQL_ROOT_PASSWORD: rootPSWD419
      MYSQL_USER: myUser
      MYSQL_PASSWORD: myUserPSWD419
    volumes:
      - mysql-second-data:/var/lib/mysql

  product-service:
    image: products-service:latest
    container_name: products-service
    ports:
      - "8080:8080"
    depends_on:
      - mongodb

#docker build -t products-service . command to create image

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.4.4
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

volumes:
  mongodb-data:
  mysql-data:
  mysql-second-data:
